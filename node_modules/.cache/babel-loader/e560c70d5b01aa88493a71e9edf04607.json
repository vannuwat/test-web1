{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n  read: read,\n  readPkcs8: readPkcs8,\n  write: write,\n  writePkcs8: writePkcs8,\n  pkcs8ToBuffer: pkcs8ToBuffer,\n  readECDSACurve: readECDSACurve,\n  writeECDSACurve: writeECDSACurve\n};\n\nvar assert = require('assert-plus');\n\nvar asn1 = require('asn1');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar algs = require('../algs');\n\nvar utils = require('../utils');\n\nvar Key = require('../key');\n\nvar PrivateKey = require('../private-key');\n\nvar pem = require('./pem');\n\nfunction read(buf, options) {\n  return pem.read(buf, options, 'pkcs8');\n}\n\nfunction write(key, options) {\n  return pem.write(key, options, 'pkcs8');\n}\n/* Helper to read in a single mpint */\n\n\nfunction readMPInt(der, nm) {\n  assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');\n  return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\n\nfunction readPkcs8(alg, type, der) {\n  /* Private keys in pkcs#8 format have a weird extra int */\n  if (der.peek() === asn1.Ber.Integer) {\n    assert.strictEqual(type, 'private', 'unexpected Integer at start of public key');\n    der.readString(asn1.Ber.Integer, true);\n  }\n\n  der.readSequence();\n  var next = der.offset + der.length;\n  var oid = der.readOID();\n\n  switch (oid) {\n    case '1.2.840.113549.1.1.1':\n      der._offset = next;\n      if (type === 'public') return readPkcs8RSAPublic(der);else return readPkcs8RSAPrivate(der);\n\n    case '1.2.840.10040.4.1':\n      if (type === 'public') return readPkcs8DSAPublic(der);else return readPkcs8DSAPrivate(der);\n\n    case '1.2.840.10045.2.1':\n      if (type === 'public') return readPkcs8ECDSAPublic(der);else return readPkcs8ECDSAPrivate(der);\n\n    case '1.3.101.112':\n      if (type === 'public') {\n        return readPkcs8EdDSAPublic(der);\n      } else {\n        return readPkcs8EdDSAPrivate(der);\n      }\n\n    case '1.3.101.110':\n      if (type === 'public') {\n        return readPkcs8X25519Public(der);\n      } else {\n        return readPkcs8X25519Private(der);\n      }\n\n    default:\n      throw new Error('Unknown key type OID ' + oid);\n  }\n}\n\nfunction readPkcs8RSAPublic(der) {\n  // bit string sequence\n  der.readSequence(asn1.Ber.BitString);\n  der.readByte();\n  der.readSequence(); // modulus\n\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'exponent'); // now, make the key\n\n  var key = {\n    type: 'rsa',\n    source: der.originalInput,\n    parts: [{\n      name: 'e',\n      data: e\n    }, {\n      name: 'n',\n      data: n\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs8RSAPrivate(der) {\n  der.readSequence(asn1.Ber.OctetString);\n  der.readSequence();\n  var ver = readMPInt(der, 'version');\n  assert.equal(ver[0], 0x0, 'unknown RSA private key version'); // modulus then public exponent\n\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'public exponent');\n  var d = readMPInt(der, 'private exponent');\n  var p = readMPInt(der, 'prime1');\n  var q = readMPInt(der, 'prime2');\n  var dmodp = readMPInt(der, 'exponent1');\n  var dmodq = readMPInt(der, 'exponent2');\n  var iqmp = readMPInt(der, 'iqmp'); // now, make the key\n\n  var key = {\n    type: 'rsa',\n    parts: [{\n      name: 'n',\n      data: n\n    }, {\n      name: 'e',\n      data: e\n    }, {\n      name: 'd',\n      data: d\n    }, {\n      name: 'iqmp',\n      data: iqmp\n    }, {\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'dmodp',\n      data: dmodp\n    }, {\n      name: 'dmodq',\n      data: dmodq\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction readPkcs8DSAPublic(der) {\n  der.readSequence();\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g'); // bit string sequence\n\n  der.readSequence(asn1.Ber.BitString);\n  der.readByte();\n  var y = readMPInt(der, 'y'); // now, make the key\n\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }, {\n      name: 'y',\n      data: y\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs8DSAPrivate(der) {\n  der.readSequence();\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g');\n  der.readSequence(asn1.Ber.OctetString);\n  var x = readMPInt(der, 'x');\n  /* The pkcs#8 format does not include the public key */\n\n  var y = utils.calculateDSAPublic(g, p, x);\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }, {\n      name: 'y',\n      data: y\n    }, {\n      name: 'x',\n      data: x\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction readECDSACurve(der) {\n  var curveName, curveNames;\n  var j, c, cd;\n\n  if (der.peek() === asn1.Ber.OID) {\n    var oid = der.readOID();\n    curveNames = Object.keys(algs.curves);\n\n    for (j = 0; j < curveNames.length; ++j) {\n      c = curveNames[j];\n      cd = algs.curves[c];\n\n      if (cd.pkcs8oid === oid) {\n        curveName = c;\n        break;\n      }\n    }\n  } else {\n    // ECParameters sequence\n    der.readSequence();\n    var version = der.readString(asn1.Ber.Integer, true);\n    assert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n    var curve = {}; // FieldID sequence\n\n    der.readSequence();\n    var fieldTypeOid = der.readOID();\n    assert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1', 'ECDSA key is not from a prime-field');\n    var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n    /*\n     * p always starts with a 1 bit, so count the zeros to get its\n     * real size.\n     */\n\n    curve.size = p.length * 8 - utils.countZeros(p); // Curve sequence\n\n    der.readSequence();\n    curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n    curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));\n    if (der.peek() === asn1.Ber.BitString) curve.s = der.readString(asn1.Ber.BitString, true); // Combined Gx and Gy\n\n    curve.G = der.readString(asn1.Ber.OctetString, true);\n    assert.strictEqual(curve.G[0], 0x4, 'uncompressed G is required');\n    curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n    curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n    assert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' + 'required');\n    curveNames = Object.keys(algs.curves);\n    var ks = Object.keys(curve);\n\n    for (j = 0; j < curveNames.length; ++j) {\n      c = curveNames[j];\n      cd = algs.curves[c];\n      var equal = true;\n\n      for (var i = 0; i < ks.length; ++i) {\n        var k = ks[i];\n        if (cd[k] === undefined) continue;\n\n        if (typeof cd[k] === 'object' && cd[k].equals !== undefined) {\n          if (!cd[k].equals(curve[k])) {\n            equal = false;\n            break;\n          }\n        } else if (Buffer.isBuffer(cd[k])) {\n          if (cd[k].toString('binary') !== curve[k].toString('binary')) {\n            equal = false;\n            break;\n          }\n        } else {\n          if (cd[k] !== curve[k]) {\n            equal = false;\n            break;\n          }\n        }\n      }\n\n      if (equal) {\n        curveName = c;\n        break;\n      }\n    }\n  }\n\n  return curveName;\n}\n\nfunction readPkcs8ECDSAPrivate(der) {\n  var curveName = readECDSACurve(der);\n  assert.string(curveName, 'a known elliptic curve');\n  der.readSequence(asn1.Ber.OctetString);\n  der.readSequence();\n  var version = readMPInt(der, 'version');\n  assert.equal(version[0], 1, 'unknown version of ECDSA key');\n  var d = der.readString(asn1.Ber.OctetString, true);\n  var Q;\n\n  if (der.peek() == 0xa0) {\n    der.readSequence(0xa0);\n    der._offset += der.length;\n  }\n\n  if (der.peek() == 0xa1) {\n    der.readSequence(0xa1);\n    Q = der.readString(asn1.Ber.BitString, true);\n    Q = utils.ecNormalize(Q);\n  }\n\n  if (Q === undefined) {\n    var pub = utils.publicFromPrivateECDSA(curveName, d);\n    Q = pub.part.Q.data;\n  }\n\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curveName)\n    }, {\n      name: 'Q',\n      data: Q\n    }, {\n      name: 'd',\n      data: d\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction readPkcs8ECDSAPublic(der) {\n  var curveName = readECDSACurve(der);\n  assert.string(curveName, 'a known elliptic curve');\n  var Q = der.readString(asn1.Ber.BitString, true);\n  Q = utils.ecNormalize(Q);\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curveName)\n    }, {\n      name: 'Q',\n      data: Q\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs8EdDSAPublic(der) {\n  if (der.peek() === 0x00) der.readByte();\n  var A = utils.readBitString(der);\n  var key = {\n    type: 'ed25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs8X25519Public(der) {\n  var A = utils.readBitString(der);\n  var key = {\n    type: 'curve25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs8EdDSAPrivate(der) {\n  if (der.peek() === 0x00) der.readByte();\n  der.readSequence(asn1.Ber.OctetString);\n  var k = der.readString(asn1.Ber.OctetString, true);\n  k = utils.zeroPadToLength(k, 32);\n  var A;\n\n  if (der.peek() === asn1.Ber.BitString) {\n    A = utils.readBitString(der);\n    A = utils.zeroPadToLength(A, 32);\n  } else {\n    A = utils.calculateED25519Public(k);\n  }\n\n  var key = {\n    type: 'ed25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }, {\n      name: 'k',\n      data: utils.zeroPadToLength(k, 32)\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction readPkcs8X25519Private(der) {\n  if (der.peek() === 0x00) der.readByte();\n  der.readSequence(asn1.Ber.OctetString);\n  var k = der.readString(asn1.Ber.OctetString, true);\n  k = utils.zeroPadToLength(k, 32);\n  var A = utils.calculateX25519Public(k);\n  var key = {\n    type: 'curve25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }, {\n      name: 'k',\n      data: utils.zeroPadToLength(k, 32)\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction pkcs8ToBuffer(key) {\n  var der = new asn1.BerWriter();\n  writePkcs8(der, key);\n  return der.buffer;\n}\n\nfunction writePkcs8(der, key) {\n  der.startSequence();\n\n  if (PrivateKey.isPrivateKey(key)) {\n    var sillyInt = Buffer.from([0]);\n    der.writeBuffer(sillyInt, asn1.Ber.Integer);\n  }\n\n  der.startSequence();\n\n  switch (key.type) {\n    case 'rsa':\n      der.writeOID('1.2.840.113549.1.1.1');\n      if (PrivateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);else writePkcs8RSAPublic(key, der);\n      break;\n\n    case 'dsa':\n      der.writeOID('1.2.840.10040.4.1');\n      if (PrivateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);else writePkcs8DSAPublic(key, der);\n      break;\n\n    case 'ecdsa':\n      der.writeOID('1.2.840.10045.2.1');\n      if (PrivateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);else writePkcs8ECDSAPublic(key, der);\n      break;\n\n    case 'ed25519':\n      der.writeOID('1.3.101.112');\n      if (PrivateKey.isPrivateKey(key)) throw new Error('Ed25519 private keys in pkcs8 ' + 'format are not supported');\n      writePkcs8EdDSAPublic(key, der);\n      break;\n\n    default:\n      throw new Error('Unsupported key type: ' + key.type);\n  }\n\n  der.endSequence();\n}\n\nfunction writePkcs8RSAPrivate(key, der) {\n  der.writeNull();\n  der.endSequence();\n  der.startSequence(asn1.Ber.OctetString);\n  der.startSequence();\n  var version = Buffer.from([0]);\n  der.writeBuffer(version, asn1.Ber.Integer);\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n  der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n}\n\nfunction writePkcs8RSAPublic(key, der) {\n  der.writeNull();\n  der.endSequence();\n  der.startSequence(asn1.Ber.BitString);\n  der.writeByte(0x00);\n  der.startSequence();\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n}\n\nfunction writePkcs8DSAPrivate(key, der) {\n  der.startSequence();\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n  der.startSequence(asn1.Ber.OctetString);\n  der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n  der.endSequence();\n}\n\nfunction writePkcs8DSAPublic(key, der) {\n  der.startSequence();\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n  der.endSequence();\n  der.endSequence();\n  der.startSequence(asn1.Ber.BitString);\n  der.writeByte(0x00);\n  der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n  der.endSequence();\n}\n\nfunction writeECDSACurve(key, der) {\n  var curve = algs.curves[key.curve];\n\n  if (curve.pkcs8oid) {\n    /* This one has a name in pkcs#8, so just write the oid */\n    der.writeOID(curve.pkcs8oid);\n  } else {\n    // ECParameters sequence\n    der.startSequence();\n    var version = Buffer.from([1]);\n    der.writeBuffer(version, asn1.Ber.Integer); // FieldID sequence\n\n    der.startSequence();\n    der.writeOID('1.2.840.10045.1.1'); // prime-field\n\n    der.writeBuffer(curve.p, asn1.Ber.Integer);\n    der.endSequence(); // Curve sequence\n\n    der.startSequence();\n    var a = curve.p;\n    if (a[0] === 0x0) a = a.slice(1);\n    der.writeBuffer(a, asn1.Ber.OctetString);\n    der.writeBuffer(curve.b, asn1.Ber.OctetString);\n    der.writeBuffer(curve.s, asn1.Ber.BitString);\n    der.endSequence();\n    der.writeBuffer(curve.G, asn1.Ber.OctetString);\n    der.writeBuffer(curve.n, asn1.Ber.Integer);\n    var h = curve.h;\n\n    if (!h) {\n      h = Buffer.from([1]);\n    }\n\n    der.writeBuffer(h, asn1.Ber.Integer); // ECParameters\n\n    der.endSequence();\n  }\n}\n\nfunction writePkcs8ECDSAPublic(key, der) {\n  writeECDSACurve(key, der);\n  der.endSequence();\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs8ECDSAPrivate(key, der) {\n  writeECDSACurve(key, der);\n  der.endSequence();\n  der.startSequence(asn1.Ber.OctetString);\n  der.startSequence();\n  var version = Buffer.from([1]);\n  der.writeBuffer(version, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n  der.startSequence(0xa1);\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n  der.endSequence();\n  der.endSequence();\n  der.endSequence();\n}\n\nfunction writePkcs8EdDSAPublic(key, der) {\n  der.endSequence();\n  utils.writeBitString(der, key.part.A.data);\n}\n\nfunction writePkcs8EdDSAPrivate(key, der) {\n  der.endSequence();\n  var k = utils.mpNormalize(key.part.k.data, true);\n  der.startSequence(asn1.Ber.OctetString);\n  der.writeBuffer(k, asn1.Ber.OctetString);\n  der.endSequence();\n}","map":{"version":3,"names":["module","exports","read","readPkcs8","write","writePkcs8","pkcs8ToBuffer","readECDSACurve","writeECDSACurve","assert","require","asn1","Buffer","algs","utils","Key","PrivateKey","pem","buf","options","key","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","alg","type","readSequence","next","offset","length","oid","readOID","_offset","readPkcs8RSAPublic","readPkcs8RSAPrivate","readPkcs8DSAPublic","readPkcs8DSAPrivate","readPkcs8ECDSAPublic","readPkcs8ECDSAPrivate","readPkcs8EdDSAPublic","readPkcs8EdDSAPrivate","readPkcs8X25519Public","readPkcs8X25519Private","Error","BitString","readByte","n","e","source","originalInput","parts","name","data","OctetString","ver","equal","d","p","q","dmodp","dmodq","iqmp","g","y","x","calculateDSAPublic","curveName","curveNames","j","c","cd","OID","Object","keys","curves","pkcs8oid","version","curve","fieldTypeOid","size","countZeros","a","b","s","G","h","ks","i","k","undefined","equals","isBuffer","toString","string","Q","ecNormalize","pub","publicFromPrivateECDSA","part","from","A","readBitString","zeroPadToLength","calculateED25519Public","calculateX25519Public","BerWriter","buffer","startSequence","isPrivateKey","sillyInt","writeBuffer","writeOID","writePkcs8RSAPrivate","writePkcs8RSAPublic","writePkcs8DSAPrivate","writePkcs8DSAPublic","writePkcs8ECDSAPrivate","writePkcs8ECDSAPublic","writePkcs8EdDSAPublic","endSequence","writeNull","addRSAMissing","writeByte","slice","writeBitString","writePkcs8EdDSAPrivate"],"sources":["D:/siit/Y4S1/senior_project/web_practice1/my-app/node_modules/sshpk/lib/formats/pkcs8.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs8: readPkcs8,\n\twrite: write,\n\twritePkcs8: writePkcs8,\n\tpkcs8ToBuffer: pkcs8ToBuffer,\n\n\treadECDSACurve: readECDSACurve,\n\twriteECDSACurve: writeECDSACurve\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs8'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs8'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs8(alg, type, der) {\n\t/* Private keys in pkcs#8 format have a weird extra int */\n\tif (der.peek() === asn1.Ber.Integer) {\n\t\tassert.strictEqual(type, 'private',\n\t\t    'unexpected Integer at start of public key');\n\t\tder.readString(asn1.Ber.Integer, true);\n\t}\n\n\tder.readSequence();\n\tvar next = der.offset + der.length;\n\n\tvar oid = der.readOID();\n\tswitch (oid) {\n\tcase '1.2.840.113549.1.1.1':\n\t\tder._offset = next;\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8RSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8RSAPrivate(der));\n\tcase '1.2.840.10040.4.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8DSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8DSAPrivate(der));\n\tcase '1.2.840.10045.2.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8ECDSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8ECDSAPrivate(der));\n\tcase '1.3.101.112':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8EdDSAPublic(der));\n\t\t} else {\n\t\t\treturn (readPkcs8EdDSAPrivate(der));\n\t\t}\n\tcase '1.3.101.110':\n\t\tif (type === 'public') {\n\t\t\treturn (readPkcs8X25519Public(der));\n\t\t} else {\n\t\t\treturn (readPkcs8X25519Private(der));\n\t\t}\n\tdefault:\n\t\tthrow (new Error('Unknown key type OID ' + oid));\n\t}\n}\n\nfunction readPkcs8RSAPublic(der) {\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\tder.readSequence();\n\n\t// modulus\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tsource: der.originalInput,\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8RSAPrivate(der) {\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar ver = readMPInt(der, 'version');\n\tassert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8DSAPublic(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\n\tvar y = readMPInt(der, 'y');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8DSAPrivate(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar x = readMPInt(der, 'x');\n\n\t/* The pkcs#8 format does not include the public key */\n\tvar y = utils.calculateDSAPublic(g, p, x);\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readECDSACurve(der) {\n\tvar curveName, curveNames;\n\tvar j, c, cd;\n\n\tif (der.peek() === asn1.Ber.OID) {\n\t\tvar oid = der.readOID();\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tif (cd.pkcs8oid === oid) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.readSequence();\n\t\tvar version = der.readString(asn1.Ber.Integer, true);\n\t\tassert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n\n\t\tvar curve = {};\n\n\t\t// FieldID sequence\n\t\tder.readSequence();\n\t\tvar fieldTypeOid = der.readOID();\n\t\tassert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',\n\t\t    'ECDSA key is not from a prime-field');\n\t\tvar p = curve.p = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\t/*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */\n\t\tcurve.size = p.length * 8 - utils.countZeros(p);\n\n\t\t// Curve sequence\n\t\tder.readSequence();\n\t\tcurve.a = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tcurve.b = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tif (der.peek() === asn1.Ber.BitString)\n\t\t\tcurve.s = der.readString(asn1.Ber.BitString, true);\n\n\t\t// Combined Gx and Gy\n\t\tcurve.G = der.readString(asn1.Ber.OctetString, true);\n\t\tassert.strictEqual(curve.G[0], 0x4,\n\t\t    'uncompressed G is required');\n\n\t\tcurve.n = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tcurve.h = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tassert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +\n\t\t    'required');\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tvar ks = Object.keys(curve);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tvar equal = true;\n\t\t\tfor (var i = 0; i < ks.length; ++i) {\n\t\t\t\tvar k = ks[i];\n\t\t\t\tif (cd[k] === undefined)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (typeof (cd[k]) === 'object' &&\n\t\t\t\t    cd[k].equals !== undefined) {\n\t\t\t\t\tif (!cd[k].equals(curve[k])) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (Buffer.isBuffer(cd[k])) {\n\t\t\t\t\tif (cd[k].toString('binary')\n\t\t\t\t\t    !== curve[k].toString('binary')) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (cd[k] !== curve[k]) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (equal) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (curveName);\n}\n\nfunction readPkcs8ECDSAPrivate(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar version = readMPInt(der, 'version');\n\tassert.equal(version[0], 1, 'unknown version of ECDSA key');\n\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\tvar Q;\n\n\tif (der.peek() == 0xa0) {\n\t\tder.readSequence(0xa0);\n\t\tder._offset += der.length;\n\t}\n\tif (der.peek() == 0xa1) {\n\t\tder.readSequence(0xa1);\n\t\tQ = der.readString(asn1.Ber.BitString, true);\n\t\tQ = utils.ecNormalize(Q);\n\t}\n\n\tif (Q === undefined) {\n\t\tvar pub = utils.publicFromPrivateECDSA(curveName, d);\n\t\tQ = pub.part.Q.data;\n\t}\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8ECDSAPublic(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curveName) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPublic(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8X25519Public(der) {\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8EdDSAPrivate(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A;\n\tif (der.peek() === asn1.Ber.BitString) {\n\t\tA = utils.readBitString(der);\n\t\tA = utils.zeroPadToLength(A, 32);\n\t} else {\n\t\tA = utils.calculateED25519Public(k);\n\t}\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8X25519Private(der) {\n\tif (der.peek() === 0x00)\n\t\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\tk = utils.zeroPadToLength(k, 32);\n\n\tvar A = utils.calculateX25519Public(k);\n\n\tvar key = {\n\t\ttype: 'curve25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: utils.zeroPadToLength(k, 32) }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction pkcs8ToBuffer(key) {\n\tvar der = new asn1.BerWriter();\n\twritePkcs8(der, key);\n\treturn (der.buffer);\n}\n\nfunction writePkcs8(der, key) {\n\tder.startSequence();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tvar sillyInt = Buffer.from([0]);\n\t\tder.writeBuffer(sillyInt, asn1.Ber.Integer);\n\t}\n\n\tder.startSequence();\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tder.writeOID('1.2.840.113549.1.1.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8RSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8RSAPublic(key, der);\n\t\tbreak;\n\tcase 'dsa':\n\t\tder.writeOID('1.2.840.10040.4.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8DSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8DSAPublic(key, der);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tder.writeOID('1.2.840.10045.2.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8ECDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8ECDSAPublic(key, der);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tder.writeOID('1.3.101.112');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\tthrow (new Error('Ed25519 private keys in pkcs8 ' +\n\t\t\t    'format are not supported'));\n\t\twritePkcs8EdDSAPublic(key, der);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported key type: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPrivate(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = Buffer.from([0]);\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPublic(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\n\tder.startSequence();\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPrivate(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPublic(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writeECDSACurve(key, der) {\n\tvar curve = algs.curves[key.curve];\n\tif (curve.pkcs8oid) {\n\t\t/* This one has a name in pkcs#8, so just write the oid */\n\t\tder.writeOID(curve.pkcs8oid);\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.startSequence();\n\n\t\tvar version = Buffer.from([1]);\n\t\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\t\t// FieldID sequence\n\t\tder.startSequence();\n\t\tder.writeOID('1.2.840.10045.1.1'); // prime-field\n\t\tder.writeBuffer(curve.p, asn1.Ber.Integer);\n\t\tder.endSequence();\n\n\t\t// Curve sequence\n\t\tder.startSequence();\n\t\tvar a = curve.p;\n\t\tif (a[0] === 0x0)\n\t\t\ta = a.slice(1);\n\t\tder.writeBuffer(a, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.b, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.s, asn1.Ber.BitString);\n\t\tder.endSequence();\n\n\t\tder.writeBuffer(curve.G, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.n, asn1.Ber.Integer);\n\t\tvar h = curve.h;\n\t\tif (!h) {\n\t\t\th = Buffer.from([1]);\n\t\t}\n\t\tder.writeBuffer(h, asn1.Ber.Integer);\n\n\t\t// ECParameters\n\t\tder.endSequence();\n\t}\n}\n\nfunction writePkcs8ECDSAPublic(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs8ECDSAPrivate(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = Buffer.from([1]);\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8EdDSAPublic(key, der) {\n\tder.endSequence();\n\n\tutils.writeBitString(der, key.part.A.data);\n}\n\nfunction writePkcs8EdDSAPrivate(key, der) {\n\tder.endSequence();\n\n\tvar k = utils.mpNormalize(key.part.k.data, true);\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(k, asn1.Ber.OctetString);\n\tder.endSequence();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}