{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\nmodule.exports = {\n  read: read,\n  readPkcs1: readPkcs1,\n  write: write,\n  writePkcs1: writePkcs1\n};\n\nvar assert = require('assert-plus');\n\nvar asn1 = require('asn1');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar algs = require('../algs');\n\nvar utils = require('../utils');\n\nvar Key = require('../key');\n\nvar PrivateKey = require('../private-key');\n\nvar pem = require('./pem');\n\nvar pkcs8 = require('./pkcs8');\n\nvar readECDSACurve = pkcs8.readECDSACurve;\n\nfunction read(buf, options) {\n  return pem.read(buf, options, 'pkcs1');\n}\n\nfunction write(key, options) {\n  return pem.write(key, options, 'pkcs1');\n}\n/* Helper to read in a single mpint */\n\n\nfunction readMPInt(der, nm) {\n  assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');\n  return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));\n}\n\nfunction readPkcs1(alg, type, der) {\n  switch (alg) {\n    case 'RSA':\n      if (type === 'public') return readPkcs1RSAPublic(der);else if (type === 'private') return readPkcs1RSAPrivate(der);\n      throw new Error('Unknown key type: ' + type);\n\n    case 'DSA':\n      if (type === 'public') return readPkcs1DSAPublic(der);else if (type === 'private') return readPkcs1DSAPrivate(der);\n      throw new Error('Unknown key type: ' + type);\n\n    case 'EC':\n    case 'ECDSA':\n      if (type === 'private') return readPkcs1ECDSAPrivate(der);else if (type === 'public') return readPkcs1ECDSAPublic(der);\n      throw new Error('Unknown key type: ' + type);\n\n    case 'EDDSA':\n    case 'EdDSA':\n      if (type === 'private') return readPkcs1EdDSAPrivate(der);\n      throw new Error(type + ' keys not supported with EdDSA');\n\n    default:\n      throw new Error('Unknown key algo: ' + alg);\n  }\n}\n\nfunction readPkcs1RSAPublic(der) {\n  // modulus and exponent\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'exponent'); // now, make the key\n\n  var key = {\n    type: 'rsa',\n    parts: [{\n      name: 'e',\n      data: e\n    }, {\n      name: 'n',\n      data: n\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs1RSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version[0], 0); // modulus then public exponent\n\n  var n = readMPInt(der, 'modulus');\n  var e = readMPInt(der, 'public exponent');\n  var d = readMPInt(der, 'private exponent');\n  var p = readMPInt(der, 'prime1');\n  var q = readMPInt(der, 'prime2');\n  var dmodp = readMPInt(der, 'exponent1');\n  var dmodq = readMPInt(der, 'exponent2');\n  var iqmp = readMPInt(der, 'iqmp'); // now, make the key\n\n  var key = {\n    type: 'rsa',\n    parts: [{\n      name: 'n',\n      data: n\n    }, {\n      name: 'e',\n      data: e\n    }, {\n      name: 'd',\n      data: d\n    }, {\n      name: 'iqmp',\n      data: iqmp\n    }, {\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'dmodp',\n      data: dmodp\n    }, {\n      name: 'dmodq',\n      data: dmodq\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction readPkcs1DSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version.readUInt8(0), 0);\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g');\n  var y = readMPInt(der, 'y');\n  var x = readMPInt(der, 'x'); // now, make the key\n\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }, {\n      name: 'y',\n      data: y\n    }, {\n      name: 'x',\n      data: x\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction readPkcs1EdDSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version.readUInt8(0), 1); // private key\n\n  var k = der.readString(asn1.Ber.OctetString, true);\n  der.readSequence(0xa0);\n  var oid = der.readOID();\n  assert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');\n  der.readSequence(0xa1);\n  var A = utils.readBitString(der);\n  var key = {\n    type: 'ed25519',\n    parts: [{\n      name: 'A',\n      data: utils.zeroPadToLength(A, 32)\n    }, {\n      name: 'k',\n      data: k\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction readPkcs1DSAPublic(der) {\n  var y = readMPInt(der, 'y');\n  var p = readMPInt(der, 'p');\n  var q = readMPInt(der, 'q');\n  var g = readMPInt(der, 'g');\n  var key = {\n    type: 'dsa',\n    parts: [{\n      name: 'y',\n      data: y\n    }, {\n      name: 'p',\n      data: p\n    }, {\n      name: 'q',\n      data: q\n    }, {\n      name: 'g',\n      data: g\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs1ECDSAPublic(der) {\n  der.readSequence();\n  var oid = der.readOID();\n  assert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n  var curveOid = der.readOID();\n  var curve;\n  var curves = Object.keys(algs.curves);\n\n  for (var j = 0; j < curves.length; ++j) {\n    var c = curves[j];\n    var cd = algs.curves[c];\n\n    if (cd.pkcs8oid === curveOid) {\n      curve = c;\n      break;\n    }\n  }\n\n  assert.string(curve, 'a known ECDSA named curve');\n  var Q = der.readString(asn1.Ber.BitString, true);\n  Q = utils.ecNormalize(Q);\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curve)\n    }, {\n      name: 'Q',\n      data: Q\n    }]\n  };\n  return new Key(key);\n}\n\nfunction readPkcs1ECDSAPrivate(der) {\n  var version = readMPInt(der, 'version');\n  assert.strictEqual(version.readUInt8(0), 1); // private key\n\n  var d = der.readString(asn1.Ber.OctetString, true);\n  der.readSequence(0xa0);\n  var curve = readECDSACurve(der);\n  assert.string(curve, 'a known elliptic curve');\n  der.readSequence(0xa1);\n  var Q = der.readString(asn1.Ber.BitString, true);\n  Q = utils.ecNormalize(Q);\n  var key = {\n    type: 'ecdsa',\n    parts: [{\n      name: 'curve',\n      data: Buffer.from(curve)\n    }, {\n      name: 'Q',\n      data: Q\n    }, {\n      name: 'd',\n      data: d\n    }]\n  };\n  return new PrivateKey(key);\n}\n\nfunction writePkcs1(der, key) {\n  der.startSequence();\n\n  switch (key.type) {\n    case 'rsa':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);else writePkcs1RSAPublic(der, key);\n      break;\n\n    case 'dsa':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);else writePkcs1DSAPublic(der, key);\n      break;\n\n    case 'ecdsa':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);else writePkcs1ECDSAPublic(der, key);\n      break;\n\n    case 'ed25519':\n      if (PrivateKey.isPrivateKey(key)) writePkcs1EdDSAPrivate(der, key);else writePkcs1EdDSAPublic(der, key);\n      break;\n\n    default:\n      throw new Error('Unknown key algo: ' + key.type);\n  }\n\n  der.endSequence();\n}\n\nfunction writePkcs1RSAPublic(der, key) {\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1RSAPrivate(der, key) {\n  var ver = Buffer.from([0]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);\n  der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPrivate(der, key) {\n  var ver = Buffer.from([0]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPublic(der, key) {\n  der.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n  der.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1ECDSAPublic(der, key) {\n  der.startSequence();\n  der.writeOID('1.2.840.10045.2.1');\n  /* ecPublicKey */\n\n  var curve = key.part.curve.data.toString();\n  var curveOid = algs.curves[curve].pkcs8oid;\n  assert.string(curveOid, 'a known ECDSA named curve');\n  der.writeOID(curveOid);\n  der.endSequence();\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs1ECDSAPrivate(der, key) {\n  var ver = Buffer.from([1]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n  der.startSequence(0xa0);\n  var curve = key.part.curve.data.toString();\n  var curveOid = algs.curves[curve].pkcs8oid;\n  assert.string(curveOid, 'a known ECDSA named curve');\n  der.writeOID(curveOid);\n  der.endSequence();\n  der.startSequence(0xa1);\n  var Q = utils.ecNormalize(key.part.Q.data, true);\n  der.writeBuffer(Q, asn1.Ber.BitString);\n  der.endSequence();\n}\n\nfunction writePkcs1EdDSAPrivate(der, key) {\n  var ver = Buffer.from([1]);\n  der.writeBuffer(ver, asn1.Ber.Integer);\n  der.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n  der.startSequence(0xa0);\n  der.writeOID('1.3.101.112');\n  der.endSequence();\n  der.startSequence(0xa1);\n  utils.writeBitString(der, key.part.A.data);\n  der.endSequence();\n}\n\nfunction writePkcs1EdDSAPublic(der, key) {\n  throw new Error('Public keys are not supported for EdDSA PKCS#1');\n}","map":{"version":3,"names":["module","exports","read","readPkcs1","write","writePkcs1","assert","require","asn1","Buffer","algs","utils","Key","PrivateKey","pem","pkcs8","readECDSACurve","buf","options","key","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","alg","type","readPkcs1RSAPublic","readPkcs1RSAPrivate","Error","readPkcs1DSAPublic","readPkcs1DSAPrivate","readPkcs1ECDSAPrivate","readPkcs1ECDSAPublic","readPkcs1EdDSAPrivate","n","e","parts","name","data","version","d","p","q","dmodp","dmodq","iqmp","readUInt8","g","y","x","k","OctetString","readSequence","oid","readOID","A","readBitString","zeroPadToLength","curveOid","curve","curves","Object","keys","j","length","c","cd","pkcs8oid","string","Q","BitString","ecNormalize","from","startSequence","isPrivateKey","writePkcs1RSAPrivate","writePkcs1RSAPublic","writePkcs1DSAPrivate","writePkcs1DSAPublic","writePkcs1ECDSAPrivate","writePkcs1ECDSAPublic","writePkcs1EdDSAPrivate","writePkcs1EdDSAPublic","endSequence","writeBuffer","part","ver","addRSAMissing","writeOID","toString","writeBitString"],"sources":["D:/siit/Y4S1/senior_project/web_practice1/my-app/node_modules/sshpk/lib/formats/pkcs1.js"],"sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs1: readPkcs1,\n\twrite: write,\n\twritePkcs1: writePkcs1\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nvar pkcs8 = require('./pkcs8');\nvar readECDSACurve = pkcs8.readECDSACurve;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs1'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs1'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs1(alg, type, der) {\n\tswitch (alg) {\n\tcase 'RSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1RSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1RSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'DSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1DSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1DSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EC':\n\tcase 'ECDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1ECDSAPrivate(der));\n\t\telse if (type === 'public')\n\t\t\treturn (readPkcs1ECDSAPublic(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EDDSA':\n\tcase 'EdDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1EdDSAPrivate(der));\n\t\tthrow (new Error(type + ' keys not supported with EdDSA'));\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + alg));\n\t}\n}\n\nfunction readPkcs1RSAPublic(der) {\n\t// modulus and exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1RSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version[0], 0);\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 0);\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\tvar y = readMPInt(der, 'y');\n\tvar x = readMPInt(der, 'x');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1EdDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar k = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');\n\n\tder.readSequence(0xa1);\n\tvar A = utils.readBitString(der);\n\n\tvar key = {\n\t\ttype: 'ed25519',\n\t\tparts: [\n\t\t\t{ name: 'A', data: utils.zeroPadToLength(A, 32) },\n\t\t\t{ name: 'k', data: k }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPublic(der) {\n\tvar y = readMPInt(der, 'y');\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPublic(der) {\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n\n\tvar curveOid = der.readOID();\n\n\tvar curve;\n\tvar curves = Object.keys(algs.curves);\n\tfor (var j = 0; j < curves.length; ++j) {\n\t\tvar c = curves[j];\n\t\tvar cd = algs.curves[c];\n\t\tif (cd.pkcs8oid === curveOid) {\n\t\t\tcurve = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tassert.string(curve, 'a known ECDSA named curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curve) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar curve = readECDSACurve(der);\n\tassert.string(curve, 'a known elliptic curve');\n\n\tder.readSequence(0xa1);\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: Buffer.from(curve) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction writePkcs1(der, key) {\n\tder.startSequence();\n\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1RSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1RSAPublic(der, key);\n\t\tbreak;\n\tcase 'dsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1DSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1DSAPublic(der, key);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1ECDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1ECDSAPublic(der, key);\n\t\tbreak;\n\tcase 'ed25519':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1EdDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1EdDSAPublic(der, key);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs1RSAPublic(der, key) {\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1RSAPrivate(der, key) {\n\tvar ver = Buffer.from([0]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPrivate(der, key) {\n\tvar ver = Buffer.from([0]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPublic(der, key) {\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1ECDSAPublic(der, key) {\n\tder.startSequence();\n\n\tder.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs1ECDSAPrivate(der, key) {\n\tvar ver = Buffer.from([1]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPrivate(der, key) {\n\tvar ver = Buffer.from([1]);\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.k.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tder.writeOID('1.3.101.112');\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tutils.writeBitString(der, key.part.A.data);\n\tder.endSequence();\n}\n\nfunction writePkcs1EdDSAPublic(der, key) {\n\tthrow (new Error('Public keys are not supported for EdDSA PKCS#1'));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}