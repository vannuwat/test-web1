{"ast":null,"code":"module.exports = ForeverAgent;\nForeverAgent.SSL = ForeverAgentSSL;\n\nvar util = require('util'),\n    Agent = require('http').Agent,\n    net = require('net'),\n    tls = require('tls'),\n    AgentSSL = require('https').Agent;\n\nfunction getConnectionName(host, port) {\n  var name = '';\n\n  if (typeof host === 'string') {\n    name = host + ':' + port;\n  } else {\n    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.\n    name = host.host + ':' + host.port + ':' + (host.localAddress ? host.localAddress + ':' : ':');\n  }\n\n  return name;\n}\n\nfunction ForeverAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.requests = {};\n  self.sockets = {};\n  self.freeSockets = {};\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;\n  self.on('free', function (socket, host, port) {\n    var name = getConnectionName(host, port);\n\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket);\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = [];\n      self.freeSockets[name].push(socket); // if an error happens while we don't use the socket anyway, meh, throw the socket away\n\n      var onIdleError = function () {\n        socket.destroy();\n      };\n\n      socket._onIdleError = onIdleError;\n      socket.on('error', onIdleError);\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy();\n    }\n  });\n}\n\nutil.inherits(ForeverAgent, Agent);\nForeverAgent.defaultMinSockets = 5;\nForeverAgent.prototype.createConnection = net.createConnection;\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest;\n\nForeverAgent.prototype.addRequest = function (req, host, port) {\n  var name = getConnectionName(host, port);\n\n  if (typeof host !== 'string') {\n    var options = host;\n    port = options.port;\n    host = options.host;\n  }\n\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop();\n    idleSocket.removeListener('error', idleSocket._onIdleError);\n    delete idleSocket._onIdleError;\n    req._reusedSocket = true;\n    req.onSocket(idleSocket);\n  } else {\n    this.addRequestNoreuse(req, host, port);\n  }\n};\n\nForeverAgent.prototype.removeSocket = function (s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s);\n\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1);\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name];\n    delete this.requests[name];\n  }\n\n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s);\n\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1);\n\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name];\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free');\n  }\n};\n\nfunction ForeverAgentSSL(options) {\n  ForeverAgent.call(this, options);\n}\n\nutil.inherits(ForeverAgentSSL, ForeverAgent);\nForeverAgentSSL.prototype.createConnection = createConnectionSSL;\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;\n\nfunction createConnectionSSL(port, host, options) {\n  if (typeof port === 'object') {\n    options = port;\n  } else if (typeof host === 'object') {\n    options = host;\n  } else if (typeof options === 'object') {\n    options = options;\n  } else {\n    options = {};\n  }\n\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n\n  return tls.connect(options);\n}","map":{"version":3,"names":["module","exports","ForeverAgent","SSL","ForeverAgentSSL","util","require","Agent","net","tls","AgentSSL","getConnectionName","host","port","name","localAddress","options","self","requests","sockets","freeSockets","maxSockets","defaultMaxSockets","minSockets","defaultMinSockets","on","socket","length","shift","onSocket","push","onIdleError","destroy","_onIdleError","inherits","prototype","createConnection","addRequestNoreuse","addRequest","req","useChunkedEncodingByDefault","idleSocket","pop","removeListener","_reusedSocket","removeSocket","s","index","indexOf","splice","createSocket","emit","call","createConnectionSSL","connect"],"sources":["D:/siit/Y4S1/senior_project/web_practice1/my-app/node_modules/forever-agent/index.js"],"sourcesContent":["module.exports = ForeverAgent\nForeverAgent.SSL = ForeverAgentSSL\n\nvar util = require('util')\n  , Agent = require('http').Agent\n  , net = require('net')\n  , tls = require('tls')\n  , AgentSSL = require('https').Agent\n  \nfunction getConnectionName(host, port) {  \n  var name = ''\n  if (typeof host === 'string') {\n    name = host + ':' + port\n  } else {\n    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.\n    name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':')\n  }\n  return name\n}    \n\nfunction ForeverAgent(options) {\n  var self = this\n  self.options = options || {}\n  self.requests = {}\n  self.sockets = {}\n  self.freeSockets = {}\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets\n  self.on('free', function(socket, host, port) {\n    var name = getConnectionName(host, port)\n\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket)\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = []\n      self.freeSockets[name].push(socket)\n      \n      // if an error happens while we don't use the socket anyway, meh, throw the socket away\n      var onIdleError = function() {\n        socket.destroy()\n      }\n      socket._onIdleError = onIdleError\n      socket.on('error', onIdleError)\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy()\n    }\n  })\n\n}\nutil.inherits(ForeverAgent, Agent)\n\nForeverAgent.defaultMinSockets = 5\n\n\nForeverAgent.prototype.createConnection = net.createConnection\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest\nForeverAgent.prototype.addRequest = function(req, host, port) {\n  var name = getConnectionName(host, port)\n  \n  if (typeof host !== 'string') {\n    var options = host\n    port = options.port\n    host = options.host\n  }\n\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop()\n    idleSocket.removeListener('error', idleSocket._onIdleError)\n    delete idleSocket._onIdleError\n    req._reusedSocket = true\n    req.onSocket(idleSocket)\n  } else {\n    this.addRequestNoreuse(req, host, port)\n  }\n}\n\nForeverAgent.prototype.removeSocket = function(s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s)\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1)\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name]\n    delete this.requests[name]\n  }\n  \n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s)\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1)\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name]\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free')\n  }\n}\n\nfunction ForeverAgentSSL (options) {\n  ForeverAgent.call(this, options)\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent)\n\nForeverAgentSSL.prototype.createConnection = createConnectionSSL\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest\n\nfunction createConnectionSSL (port, host, options) {\n  if (typeof port === 'object') {\n    options = port;\n  } else if (typeof host === 'object') {\n    options = host;\n  } else if (typeof options === 'object') {\n    options = options;\n  } else {\n    options = {};\n  }\n\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n\n  return tls.connect(options);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}