{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n  read: read,\n  write: write\n};\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar rfc4253 = require('./rfc4253');\n\nvar Key = require('../key');\n\nvar SSHBuffer = require('../ssh-buffer');\n\nvar crypto = require('crypto');\n\nvar PrivateKey = require('../private-key');\n\nvar errors = require('../errors'); // https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\n\n\nfunction read(buf, options) {\n  var lines = buf.toString('ascii').split(/[\\r\\n]+/);\n  var found = false;\n  var parts;\n  var si = 0;\n  var formatVersion;\n\n  while (si < lines.length) {\n    parts = splitHeader(lines[si++]);\n\n    if (parts) {\n      formatVersion = {\n        'putty-user-key-file-2': 2,\n        'putty-user-key-file-3': 3\n      }[parts[0].toLowerCase()];\n\n      if (formatVersion) {\n        found = true;\n        break;\n      }\n    }\n  }\n\n  if (!found) {\n    throw new Error('No PuTTY format first line found');\n  }\n\n  var alg = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'encryption');\n  var encryption = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'comment');\n  var comment = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'public-lines');\n  var publicLines = parseInt(parts[1], 10);\n\n  if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n    throw new Error('Invalid public-lines count');\n  }\n\n  var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(''), 'base64');\n  var keyType = rfc4253.algToKeyType(alg);\n  var key = rfc4253.read(publicBuf);\n\n  if (key.type !== keyType) {\n    throw new Error('Outer key algorithm mismatch');\n  }\n\n  si += publicLines;\n\n  if (lines[si]) {\n    parts = splitHeader(lines[si++]);\n    assert.equal(parts[0].toLowerCase(), 'private-lines');\n    var privateLines = parseInt(parts[1], 10);\n\n    if (!isFinite(privateLines) || privateLines < 0 || privateLines > lines.length) {\n      throw new Error('Invalid private-lines count');\n    }\n\n    var privateBuf = Buffer.from(lines.slice(si, si + privateLines).join(''), 'base64');\n\n    if (encryption !== 'none' && formatVersion === 3) {\n      throw new Error('Encrypted keys arenot supported for' + ' PuTTY format version 3');\n    }\n\n    if (encryption === 'aes256-cbc') {\n      if (!options.passphrase) {\n        throw new errors.KeyEncryptedError(options.filename, 'PEM');\n      }\n\n      var iv = Buffer.alloc(16, 0);\n      var decipher = crypto.createDecipheriv('aes-256-cbc', derivePPK2EncryptionKey(options.passphrase), iv);\n      decipher.setAutoPadding(false);\n      privateBuf = Buffer.concat([decipher.update(privateBuf), decipher.final()]);\n    }\n\n    key = new PrivateKey(key);\n\n    if (key.type !== keyType) {\n      throw new Error('Outer key algorithm mismatch');\n    }\n\n    var sshbuf = new SSHBuffer({\n      buffer: privateBuf\n    });\n    var privateKeyParts;\n\n    if (alg === 'ssh-dss') {\n      privateKeyParts = [{\n        name: 'x',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg === 'ssh-rsa') {\n      privateKeyParts = [{\n        name: 'd',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'p',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'q',\n        data: sshbuf.readBuffer()\n      }, {\n        name: 'iqmp',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg.match(/^ecdsa-sha2-nistp/)) {\n      privateKeyParts = [{\n        name: 'd',\n        data: sshbuf.readBuffer()\n      }];\n    } else if (alg === 'ssh-ed25519') {\n      privateKeyParts = [{\n        name: 'k',\n        data: sshbuf.readBuffer()\n      }];\n    } else {\n      throw new Error('Unsupported PPK key type: ' + alg);\n    }\n\n    key = new PrivateKey({\n      type: key.type,\n      parts: key.parts.concat(privateKeyParts)\n    });\n  }\n\n  key.comment = comment;\n  return key;\n}\n\nfunction derivePPK2EncryptionKey(passphrase) {\n  var hash1 = crypto.createHash('sha1').update(Buffer.concat([Buffer.from([0, 0, 0, 0]), Buffer.from(passphrase)])).digest();\n  var hash2 = crypto.createHash('sha1').update(Buffer.concat([Buffer.from([0, 0, 0, 1]), Buffer.from(passphrase)])).digest();\n  return Buffer.concat([hash1, hash2]).slice(0, 32);\n}\n\nfunction splitHeader(line) {\n  var idx = line.indexOf(':');\n  if (idx === -1) return null;\n  var header = line.slice(0, idx);\n  ++idx;\n\n  while (line[idx] === ' ') ++idx;\n\n  var rest = line.slice(idx);\n  return [header, rest];\n}\n\nfunction write(key, options) {\n  assert.object(key);\n  if (!Key.isKey(key)) throw new Error('Must be a public key');\n  var alg = rfc4253.keyTypeToAlg(key);\n  var buf = rfc4253.write(key);\n  var comment = key.comment || '';\n  var b64 = buf.toString('base64');\n  var lines = wrap(b64, 64);\n  lines.unshift('Public-Lines: ' + lines.length);\n  lines.unshift('Comment: ' + comment);\n  lines.unshift('Encryption: none');\n  lines.unshift('PuTTY-User-Key-File-2: ' + alg);\n  return Buffer.from(lines.join('\\n') + '\\n');\n}\n\nfunction wrap(txt, len) {\n  var lines = [];\n  var pos = 0;\n\n  while (pos < txt.length) {\n    lines.push(txt.slice(pos, pos + 64));\n    pos += 64;\n  }\n\n  return lines;\n}","map":{"version":3,"names":["module","exports","read","write","assert","require","Buffer","rfc4253","Key","SSHBuffer","crypto","PrivateKey","errors","buf","options","lines","toString","split","found","parts","si","formatVersion","length","splitHeader","toLowerCase","Error","alg","equal","encryption","comment","publicLines","parseInt","isFinite","publicBuf","from","slice","join","keyType","algToKeyType","key","type","privateLines","privateBuf","passphrase","KeyEncryptedError","filename","iv","alloc","decipher","createDecipheriv","derivePPK2EncryptionKey","setAutoPadding","concat","update","final","sshbuf","buffer","privateKeyParts","name","data","readBuffer","match","hash1","createHash","digest","hash2","line","idx","indexOf","header","rest","object","isKey","keyTypeToAlg","b64","wrap","unshift","txt","len","pos","push"],"sources":["D:/siit/Y4S1/senior_project/web_practice1/my-app/node_modules/sshpk/lib/formats/putty.js"],"sourcesContent":["// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar Key = require('../key');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar PrivateKey = require('../private-key');\n\nvar errors = require('../errors');\n\n// https://tartarus.org/~simon/putty-prerel-snapshots/htmldoc/AppendixC.html\nfunction read(buf, options) {\n\tvar lines = buf.toString('ascii').split(/[\\r\\n]+/);\n\tvar found = false;\n\tvar parts;\n\tvar si = 0;\n\tvar formatVersion;\n\twhile (si < lines.length) {\n\t\tparts = splitHeader(lines[si++]);\n\t\tif (parts) {\n\t\t\tformatVersion = {\n\t\t\t\t'putty-user-key-file-2': 2,\n\t\t\t\t'putty-user-key-file-3': 3\n\t\t\t}[parts[0].toLowerCase()];\n\t\t\tif (formatVersion) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (!found) {\n\t\tthrow (new Error('No PuTTY format first line found'));\n\t}\n\tvar alg = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'encryption');\n\tvar encryption = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'comment');\n\tvar comment = parts[1];\n\n\tparts = splitHeader(lines[si++]);\n\tassert.equal(parts[0].toLowerCase(), 'public-lines');\n\tvar publicLines = parseInt(parts[1], 10);\n\tif (!isFinite(publicLines) || publicLines < 0 ||\n\t    publicLines > lines.length) {\n\t\tthrow (new Error('Invalid public-lines count'));\n\t}\n\n\tvar publicBuf = Buffer.from(\n\t    lines.slice(si, si + publicLines).join(''), 'base64');\n\tvar keyType = rfc4253.algToKeyType(alg);\n\tvar key = rfc4253.read(publicBuf);\n\tif (key.type !== keyType) {\n\t\tthrow (new Error('Outer key algorithm mismatch'));\n\t}\n\n\tsi += publicLines;\n\tif (lines[si]) {\n\t\tparts = splitHeader(lines[si++]);\n\t\tassert.equal(parts[0].toLowerCase(), 'private-lines');\n\t\tvar privateLines = parseInt(parts[1], 10);\n\t\tif (!isFinite(privateLines) || privateLines < 0 ||\n\t\t    privateLines > lines.length) {\n\t\t\tthrow (new Error('Invalid private-lines count'));\n\t\t}\n\n\t\tvar privateBuf = Buffer.from(\n\t\t\tlines.slice(si, si + privateLines).join(''), 'base64');\n\n\t\tif (encryption !== 'none' && formatVersion === 3) {\n\t\t\tthrow new Error('Encrypted keys arenot supported for' +\n\t\t\t' PuTTY format version 3');\n\t\t}\n\n\t\tif (encryption === 'aes256-cbc') {\n\t\t\tif (!options.passphrase) {\n\t\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t\t\toptions.filename, 'PEM'));\n\t\t\t}\n\n\t\t\tvar iv = Buffer.alloc(16, 0);\n\t\t\tvar decipher = crypto.createDecipheriv(\n\t\t\t\t'aes-256-cbc',\n\t\t\t\tderivePPK2EncryptionKey(options.passphrase),\n\t\t\t\tiv);\n\t\t\tdecipher.setAutoPadding(false);\n\t\t\tprivateBuf = Buffer.concat([\n\t\t\t\tdecipher.update(privateBuf), decipher.final()]);\n\t\t}\n\n\t\tkey = new PrivateKey(key);\n\t\tif (key.type !== keyType) {\n\t\t\tthrow (new Error('Outer key algorithm mismatch'));\n\t\t}\n\n\t\tvar sshbuf = new SSHBuffer({buffer: privateBuf});\n\t\tvar privateKeyParts;\n\t\tif (alg === 'ssh-dss') {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'x',\n\t\t\t\tdata: sshbuf.readBuffer()\n\t\t\t}];\n\t\t} else if (alg === 'ssh-rsa') {\n\t\t\tprivateKeyParts = [\n\t\t\t\t{ name: 'd', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'p', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'q', data: sshbuf.readBuffer() },\n\t\t\t\t{ name: 'iqmp', data: sshbuf.readBuffer() }\n\t\t\t];\n\t\t} else if (alg.match(/^ecdsa-sha2-nistp/)) {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'd', data: sshbuf.readBuffer()\n\t\t\t} ];\n\t\t} else if (alg === 'ssh-ed25519') {\n\t\t\tprivateKeyParts = [ {\n\t\t\t\tname: 'k', data: sshbuf.readBuffer()\n\t\t\t} ];\n\t\t} else {\n\t\t\tthrow new Error('Unsupported PPK key type: ' + alg);\n\t\t}\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: key.type,\n\t\t\tparts: key.parts.concat(privateKeyParts)\n\t\t});\n\t}\n\n\tkey.comment = comment;\n\treturn (key);\n}\n\nfunction derivePPK2EncryptionKey(passphrase) {\n\tvar hash1 = crypto.createHash('sha1').update(Buffer.concat([\n\t\tBuffer.from([0, 0, 0, 0]),\n\t\tBuffer.from(passphrase)\n\t])).digest();\n\tvar hash2 = crypto.createHash('sha1').update(Buffer.concat([\n\t\tBuffer.from([0, 0, 0, 1]),\n\t\tBuffer.from(passphrase)\n\t])).digest();\n\treturn (Buffer.concat([hash1, hash2]).slice(0, 32));\n}\n\nfunction splitHeader(line) {\n\tvar idx = line.indexOf(':');\n\tif (idx === -1)\n\t\treturn (null);\n\tvar header = line.slice(0, idx);\n\t++idx;\n\twhile (line[idx] === ' ')\n\t\t++idx;\n\tvar rest = line.slice(idx);\n\treturn ([header, rest]);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tvar buf = rfc4253.write(key);\n\tvar comment = key.comment || '';\n\n\tvar b64 = buf.toString('base64');\n\tvar lines = wrap(b64, 64);\n\n\tlines.unshift('Public-Lines: ' + lines.length);\n\tlines.unshift('Comment: ' + comment);\n\tlines.unshift('Encryption: none');\n\tlines.unshift('PuTTY-User-Key-File-2: ' + alg);\n\n\treturn (Buffer.from(lines.join('\\n') + '\\n'));\n}\n\nfunction wrap(txt, len) {\n\tvar lines = [];\n\tvar pos = 0;\n\twhile (pos < txt.length) {\n\t\tlines.push(txt.slice(pos, pos + 64));\n\t\tpos += 64;\n\t}\n\treturn (lines);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}